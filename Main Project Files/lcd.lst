


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         ; Use I2C3 to send data to SSD1306 128 by 64 pixel oLED
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement I2C_Send2
                       
    9 00000000         
   10 00000000                 EXPORT           I2C_Send2
   11 00000000                 PRESERVE8
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000                 ALIGN
   15 00000000 40023000 
                       I2C3_MSA_R
                               EQU              0x40023000
   16 00000000 40023004 
                       I2C3_MCS_R
                               EQU              0x40023004
   17 00000000 40023008 
                       I2C3_MDR_R
                               EQU              0x40023008
   18 00000000         ; sends two bytes to specified slave
   19 00000000         ; Input: R0  7-bit slave address
   20 00000000         ;        R1  first 8-bit data to be written.
   21 00000000         ;        R2  second 8-bit data to be written.
   22 00000000         ; Output: 0 if successful, nonzero (error code) if error
                       
   23 00000000         ; Assumes: I2C3 and port D have already been initialized
                        and enabled
   24 00000000         I2C_Send2
   25 00000000         ;; --UUU-- 
   26 00000000         ; 1) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
   27 00000000         busy
   28 00000000 4B23            LDR              R3,= I2C3_MCS_R ;Load R3 with a
                                                            ddress of MCS regis
                                                            ter
   29 00000002 681B            LDR              R3, [R3]    ;Load R3 the data i
                                                            n MCS regsiter
   30 00000004 F003 0301       AND              R3, #0x01   ;Extract bit 0 out 
                                                            of the MCS register
                                                            
   31 00000008 2B00            CMP              R3, #0      ;Compare R3 with 0 
                                                            and update CC
   32 0000000A D1F9            BNE              busy        ;Check if R3 is not
                                                             equal to 0
   33 0000000C         ; 2) write slave address to I2C3_MSA_R, 
   34 0000000C         ;     MSA bits7-1 is slave address
   35 0000000C         ;     MSA bit 0 is 0 for send data
   36 0000000C         loop
   37 0000000C EA4F 0040       LSL              R0, #1      ;Left shift R0 by 1
                                                             bit to get slave a
                                                            ddress in bits 1-7



ARM Macro Assembler    Page 2 


   38 00000010 F000 0C01       AND              R12, R0, #0x01 
                                                            ;Extract out bit 0
   39 00000014 F1BC 0F00       CMP              R12, #0     ;Compare R12 with 0
                                                             and update CC
   40 00000018 D1F8            BNE              loop        ;Check if R12 is no
                                                            t 0
   41 0000001A 4B1E            LDR              R3,= I2C3_MSA_R ;Load R3 with t
                                                            he address of MSA r
                                                            egister
   42 0000001C 6018            STR              R0, [R3]    ;Store R0 into MSA 
                                                            register
   43 0000001E         ; 3) write first data to I2C3_MDR_R
   44 0000001E 4B1E            LDR              R3,= I2C3_MDR_R ;Load R3 with M
                                                            DR register
   45 00000020 6019            STR              R1, [R3]    ;Store first data i
                                                            nto the MDR registe
                                                            r
   46 00000022         ; 4) write 0x03 to I2C3_MCS_R,  send no stop, generate s
                       tart, enable
   47 00000022 4B1B            LDR              R3,= I2C3_MCS_R ;Load R3 with t
                                                            he address of the M
                                                            CS register
   48 00000024 F04F 0C03       MOV              R12, #0x03  ;Load R12 with 0x03
                                                            
   49 00000028 F8C3 C000       STR              R12, [R3]   ;Store 0x03 into th
                                                            e MCS register
   50 0000002C         ; add 4 NOPs to wait for I2C to start transmitting
   51 0000002C BF00            NOP
   52 0000002E BF00            NOP
   53 00000030 BF00            NOP
   54 00000032 BF00            NOP
   55 00000034         ; 5) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
   56 00000034         busy1
   57 00000034 4B16            LDR              R3,= I2C3_MCS_R ;Load R3 with t
                                                            he address of the M
                                                            CS register
   58 00000036 681B            LDR              R3, [R3]    ;Load R3 with the d
                                                            ata in the MCS regi
                                                            ster
   59 00000038 F003 0301       AND              R3, #0x01   ;Extract bit 0 of t
                                                            he MCS register
   60 0000003C 2B00            CMP              R3, #0      ;Compare R3 with 0 
                                                            and update CC
   61 0000003E D1F9            BNE              busy1       ;Check if R3 is not
                                                             equal to 0
   62 00000040         ; 6) check for errors, if any bits 3,2,1 I2C3_MCS_R is h
                       igh 
   63 00000040         ;    a) if error set I2C3_MCS_R to 0x04 to send stop 
   64 00000040         ;    b) if error return R0 equal to bits 3,2,1 of I2C3_M
                       CS_R, error bits
   65 00000040 4B13            LDR              R3,= I2C3_MCS_R
   66 00000042 681B            LDR              R3, [R3]
   67 00000044 EA4F 0363       ASR              R3, #1
   68 00000048 F003 0307       AND              R3, #0x07
   69 0000004C 2B00            CMP              R3, #0
   70 0000004E D006            BEQ              next
   71 00000050         
   72 00000050 6818            LDR              R0, [R3]



ARM Macro Assembler    Page 3 


   73 00000052 F04F 0C04       MOV              R12, #0x04
   74 00000056 4B0E            LDR              R3,= I2C3_MCS_R
   75 00000058 F8C3 C000       STR              R12, [R3]
   76 0000005C 4770            BX               LR
   77 0000005E         next
   78 0000005E         ; 7) write second data to I2C3_MDR_R
   79 0000005E 4B0E            LDR              R3,= I2C3_MDR_R
   80 00000060 601A            STR              R2, [R3]
   81 00000062         ; 8) write 0x05 to I2C3_MCS_R, send stop, no start, enab
                       le
   82 00000062 4B0B            LDR              R3,= I2C3_MCS_R
   83 00000064 F04F 0C05       MOV              R12, #0x05
   84 00000068 F8C3 C000       STR              R12, [R3]
   85 0000006C         ; add 4 NOPs to wait for I2C to start transmitting
   86 0000006C BF00            NOP
   87 0000006E BF00            NOP
   88 00000070 BF00            NOP
   89 00000072 BF00            NOP
   90 00000074         ; 9) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
   91 00000074         busy2
   92 00000074 4B06            LDR              R3,= I2C3_MCS_R
   93 00000076 681B            LDR              R3, [R3]
   94 00000078 F003 0301       AND              R3, #0x01
   95 0000007C 2B00            CMP              R3, #0
   96 0000007E D1F9            BNE              busy2
   97 00000080         ; 10) return R0 equal to bits 3,2,1 of I2C3_MCS_R, error
                        bits
   98 00000080         ;     will be 0 is no error
   99 00000080 4B03            LDR              R3,= I2C3_MCS_R
  100 00000082 681B            LDR              R3, [R3]
  101 00000084 EA4F 0363       ASR              R3, #1
  102 00000088 F003 0307       AND              R3, #0x07
  103 0000008C 6818            LDR              R0, [R3]
  104 0000008E         
  105 0000008E 4770            BX               LR          ;   return
  106 00000090         
  107 00000090         
  108 00000090                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  109 00000090                 END                          ; end of file
              40023004 
              40023000 
              40023008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\lcd.d -o.\lcd.o -I.\RTE\_Lab10 -IC:\Users\looha\AppData\Local\Ar
m\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\looha\AppData\Local\Arm\P
acks\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__UVISION_VERSION 
SETA 534" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predef
ine="_RTE_ SETA 1" --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file LCD.s
   Uses
      None
Comment: .text unused
I2C_Send2 00000000

Symbol: I2C_Send2
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 10 in file LCD.s
Comment: I2C_Send2 used once
busy 00000000

Symbol: busy
   Definitions
      At line 27 in file LCD.s
   Uses
      At line 32 in file LCD.s
Comment: busy used once
busy1 00000034

Symbol: busy1
   Definitions
      At line 56 in file LCD.s
   Uses
      At line 61 in file LCD.s
Comment: busy1 used once
busy2 00000074

Symbol: busy2
   Definitions
      At line 91 in file LCD.s
   Uses
      At line 96 in file LCD.s
Comment: busy2 used once
loop 0000000C

Symbol: loop
   Definitions
      At line 36 in file LCD.s
   Uses
      At line 40 in file LCD.s
Comment: loop used once
next 0000005E

Symbol: next
   Definitions
      At line 77 in file LCD.s
   Uses
      At line 70 in file LCD.s
Comment: next used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

I2C3_MCS_R 40023004

Symbol: I2C3_MCS_R
   Definitions
      At line 16 in file LCD.s
   Uses
      At line 28 in file LCD.s
      At line 47 in file LCD.s
      At line 57 in file LCD.s
      At line 65 in file LCD.s
      At line 74 in file LCD.s
      At line 82 in file LCD.s
      At line 92 in file LCD.s
      At line 99 in file LCD.s

I2C3_MDR_R 40023008

Symbol: I2C3_MDR_R
   Definitions
      At line 17 in file LCD.s
   Uses
      At line 44 in file LCD.s
      At line 79 in file LCD.s

I2C3_MSA_R 40023000

Symbol: I2C3_MSA_R
   Definitions
      At line 15 in file LCD.s
   Uses
      At line 41 in file LCD.s
Comment: I2C3_MSA_R used once
3 symbols
345 symbols in table
